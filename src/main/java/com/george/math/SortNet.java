package com.george.math;

/**
 * Created by George on 2017/10/10.
 * 一.比较网络概念
 * 比较网络左边是输入序列，右边是输出序列，只能做比较操作，但可以同时执行
 *
 * 由三个部件组成输入，比较器，输出
 *
 * 排序网络即为比较网络的特殊情况，即对于任意输入序列，经过排序网络后的输出序列的值是单调递增的
 *
 * 二.0-1原理
 * 如果对于属于集合{0,1}的每个输入值，排序网络都能正确运行，则对于任意的输入值，它也能正确运行
 *
 * 三.双调排序网络
 * 构造一个有效排序网络的前提是首先构造一个对任意双调序列进行排序的比较网络，双调序列要么先单调递增后单调递减，或者循环移动成为先单调递增后单调递减
 * 双调的0-1序列形式为0-1-0 或者 1-0-1，其中单调递增或者单调递减序列也是双调的
 *
 * 半清洁器：任意双调序列通过半清洁器后可以保证两部分输出序列都是双调的，且小值在上半部分，大值在下半部分，且可以保证上半部分全是0或者下半部分全是1
 *
 * 构建一个双调排序网络，第一部分首先对输入的双调序列进行半清洁器排序，保证上半部分的值至少比下半部分的值少，且总有一个部分是清洁的，然后BITONIC-SORTER[n/2]分别对上下两部分排序，最后采用比较器对相邻两位进行排序
 * 若能满足任意双调序列的0-1形式输入，则该排序网络有效
 *
 * 四.合并网络
 * 要合并两个有序序列X，Y，只需要对X和YR(对Y逆序)进行双调排序
 * 具体做法：比较输入i和输入n-i+1，得到两个双调序列，分别对两个双调序列进行双调排序BITONIC-SORTER(n/2)最后得到合并排序输出结果
 *
 * 五.排序网络
 * 一个有效的排序网络实际上可以首先对两个子序列排序之后SORTER(n/2)再进行合并
 * 最终可以转化为MERGE[2],MERGE[4],MERGE[8]..子合并网络的递归执行
 *
 * 即可以在O(lg2n)的时间内并行对n个数进行排序
 */
public class SortNet {
}
